=================================
The KBUS documentation and sphinx
=================================

Pre-built documentation
-----------------------
For your comfort and convenience, a pre-built version of the KBus
documentation is available at:

    http://code.google.com/p/kbus/

or (since you've extracted this from Mercurial) it should be available within
this directory at:

    _build/html/index.html

(yes, that name starts with an underscore).

Building the documentation
--------------------------
The KBus documentation is built using Sphinx_.

.. note:: It needs (at least) version 0.6 of Sphinx.  Recent versions of
	Ubuntu provide this in the ``python-sphinx`` package; on older
	versions you should use ``easy_install`` as described on the
	Sphinx website.


You also need graphviz (which provides ``dot``).

.. _Sphinx: http://sphinx.pocoo.org/

With luck, the HTML checked out with the KBus sources will be up-to-date, and
you won't need to (re)build the documentation. However, if you should need to
(for instance, because you've updated it), just use the Makefile::

    make html

The Python bindings
-------------------
Read the ``kbus-python-*.txt`` files to see how individual classes and
functions within kbus.py are documented. Obviously, if you add, remove or
rename such, you may need to alter these files -- please do so appropriately.

Mime type magic
---------------
In order for the documentation in the Google Code Mercurial repository to be
useable as documentation, the HTML, CSS and JavaScript files in the _build
directory tree need to have the correct mime types. Mercurial is clever
enough to be able to cope with this.

Mercurial gotchas
-----------------
Sphinx believes that the contents of ``_build`` are transitory - i.e., that it
is free to delete them if it wishes. In particular, ``make clean`` will delete
all of the contents of ``_build``.

Meanwhile, we've committed ``_build/html`` and its contents to Mercurial.

This used to be a problem under Subversion, but is no longer since moving
to Mercurial. If you accidentally ``make clean`` the docs away, you can
use ``hg checkout`` to retrieve them.
With luck the dependency tracking in the ``make`` process will cope.

